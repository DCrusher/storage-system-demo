{"version":3,"sources":["components/Dialog/Dialog.tsx","components/Drawer/Drawer.tsx","constants/instanceOperations.ts","services/StorageSerivce.ts","store/storagesProducts.ts","store/storages.ts","scenes/Products/components/ProductStoragesFields/ProductStoragesFields.tsx","utils/index.ts","components/FormErrors/FormErrors.tsx","scenes/Products/components/ProductInstanceForm/ProductInstanceForm.tsx","services/ProductService.ts","utils/seeds.ts","store/products.ts","scenes/Products/components/ProductsList/ProductsList.tsx","scenes/Products/components/ProductDeleteConfirm/ProductDeleteConfirm.tsx","scenes/Products/components/ProductDetails/ProductDetails.tsx","scenes/Products/Products.tsx","scenes/Storages/components/StorageProductsFields/StorageProductsFields.tsx","scenes/Storages/components/StorageInstanceForm/StorageInstanceForm.tsx","scenes/Storages/components/StorageRedistributionFields/StorageRedistributionFields.tsx","scenes/Storages/components/StorageRedistributionForm/StorageRedistributionForm.tsx","scenes/Storages/components/StoragesList/StoragesList.tsx","scenes/Storages/components/StorageDetails/StorageDetails.tsx","scenes/Storages/Storages.tsx","routes.ts","theme/theme.ts","serviceWorker.ts","services/AuthService.ts","components/PrivateRoute/PrivateRoute.tsx","scenes/Dashboard/components/FeatureWidget/FeatureWidget.tsx","scenes/Dashboard/Dashboard.tsx","layouts/AppLayout/User.tsx","layouts/AppLayout/SideMenu.tsx","layouts/AppLayout/AppLayout.tsx","App.tsx","layouts/AuthLayout/AuthLayout.tsx","Auth.tsx","index.tsx"],"names":["DialogTitle","onClose","children","TitleWrapper","CloseButton","aria-label","onClick","Dialog","open","maxWidth","title","className","transitionDuration","styled","div","IconButton","Drawer","caption","anchor","variant","Inner","Header","Typography","component","head","storage","Promise","resolve","setTimeout","newStorage","id","uuid","updatedStorage","StorageProductDomain","createDomain","addAllocation","event","deleteAllocation","changeAllocationForStorage","changeAllocationForProduct","deleteAllocationForProduct","redistributeStorage","StoragesProductsStore","store","on","state","payload","filter","productId","storageId","products","storagesWithoutCurrent","newAllocation","map","product","storages","productsWithoutCurrent","allocation","allocationWithoutVoidStorage","StorageDomain","createStorage","effect","updateStorage","deleteStorage","use","StorageSerivce","initialState","name","StoragesStore","done","result","forEach","quantity","storagesWithoutUpdated","ProductStoragesFields","storagesWithQuantity","onChange","render","arrayHelpers","ProductsCaption","Fab","size","push","length","index","Grid","container","alignItems","spacing","item","xs","FormControlSelect","InputLabel","htmlFor","Select","value","inputProps","autoWidth","MenuItem","key","TextField","label","margin","type","fullWidth","remove","FormControl","isEmpty","obj","Array","isArray","Object","entries","constructor","FormErrors","data","space","replacer","errors","Wrapper","JSON","stringify","replace","validationSchema","Yup","values","totalQuantity","storagesTotalQuantity","reduce","acc","shape","required","min","ProductInstanceForm","initialValues","submitCaption","onSubmit","useStore","validateOnChange","handleSubmit","handleChange","WrapperForm","FormMessages","FormContent","ProductsWrapper","SubmitButton","color","form","Paper","Button","seedProduct","ProductDomain","createProduct","updateProduct","deleteProduct","ProductService","ProductsStore","Products","onEdit","onDelete","onView","storagesProducts","List","storagesCount","productsTotalQuantity","ListItem","button","ListItemAvatar","Tooltip","Badge","badgeContent","max","anchorOrigin","horizontal","vertical","ListItemText","primary","secondary","ListItemSecondaryAction","Divider","ProductDeleteConfirm","PlaceholderText","ActionButton","ProductDetails","productAllocation","CommonInfo","Placeholder","find","emptyProduct","DIALOG_TITLES","instanceOperations","SUBMIT_CAPTIONS","React","instanceOperation","setInstanceOperation","currentProduct","setCurrentProduct","isEdit","isDelete","isDialogOpen","isView","ToolbarDivider","ProductsList","exit","productByStorages","StorageProductsFields","productsWithQuantity","StorageInstanceForm","productsIdWithQuantity","allocationErrors","foundProduct","quantityAllocated","record","unallocatedQuantity","StorageRedistributionFields","disabled","of","StorageRedistributionForm","storageAllocation","storagesWithoutDistributed","unshift","_event","StoragesList","productsCount","StorageDetails","emptyStorage","Storages","currentStorage","setCurrentStorage","storageWithProducts","root","path","app","Icon","ShoppingCartIcon","Scene","StoreIcon","auth","signin","createMuiTheme","palette","indigo","pink","error","red","contrastThreshold","tonalOffset","Boolean","window","location","hostname","match","secret","password","Cookies","set","jwt","encode","user","get","token","decode","PrivateRoute","Component","redirectTo","rest","props","AuthService","isAuthorized","to","FeatureWidget","counter","FeatureButton","Dashboard","history","useReactRouter","productsRoute","routes","storagesRoute","ProductsIcon","StoragesIcon","User","anchorEl","setAnchorEl","UserButton","currentTarget","UserIcon","UserMenu","getContentAnchorEl","transformOrigin","keepMounted","signout","AccountBox","Menu","appRoutes","SideMenu","ListItemIcon","AppLayout","currentCaption","onChangePath","setOpen","rootPath","CssBaseline","TopBar","position","TopToolbar","MenuButton","edge","Title","noWrap","LeftSideBar","Caption","Logo","DashboardIcon","Content","ContentWrapper","AppBar","p","Toolbar","css","main","Container","App","useState","setCurrentCaption","exact","AuthLayout","AvatarWrapper","Avatar","Auth","Form","preventDefault","elements","autoComplete","autoFocus","ReactDOM","StylesProvider","injectFirst","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23d71c03.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport MuiDialog from \"@material-ui/core/Dialog\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\ntype MaxWidth = \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | false;\r\n\r\ninterface Props {\r\n  open: boolean;\r\n  title: React.ReactNode;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n  className?: string;\r\n  maxWidth?: MaxWidth;\r\n  transitionDuration?: {\r\n    enter?: number;\r\n    exit?: number;\r\n  };\r\n}\r\n\r\ninterface DialogTitleProps {\r\n  children: React.ReactNode;\r\n  onClose?: () => void;\r\n}\r\n\r\nconst DialogTitle: React.FC<DialogTitleProps> = ({ onClose, children }) => {\r\n  return (\r\n    <MuiDialogTitle>\r\n      <TitleWrapper>\r\n        {children}\r\n        {onClose ? (\r\n          <CloseButton aria-label=\"close\" onClick={onClose}>\r\n            <CloseIcon />\r\n          </CloseButton>\r\n        ) : null}\r\n      </TitleWrapper>\r\n    </MuiDialogTitle>\r\n  );\r\n};\r\n\r\nconst Dialog: React.FC<Props> = ({\r\n  open,\r\n  maxWidth,\r\n  title,\r\n  children,\r\n  className,\r\n  onClose,\r\n  transitionDuration\r\n}): JSX.Element => {\r\n  return (\r\n    <MuiDialog\r\n      open={open}\r\n      onClose={onClose}\r\n      className={className}\r\n      maxWidth={maxWidth}\r\n      transitionDuration={transitionDuration}\r\n    >\r\n      <DialogTitle onClose={onClose}>{title}</DialogTitle>\r\n      {children}\r\n    </MuiDialog>\r\n  );\r\n};\r\n\r\nexport default Dialog;\r\n\r\nconst TitleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst CloseButton = styled(IconButton)`\r\n  margin-left: 20px;\r\n`;\r\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { Drawer as MuiDrawer, Typography } from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\ninterface Props {\n  children: React.ReactNode;\n  open: boolean;\n  caption?: string;\n  onClose?: () => void;\n}\n\nconst Drawer: React.FC<Props> = ({\n  open,\n  caption,\n  children,\n  onClose\n}): JSX.Element => {\n  return (\n    <MuiDrawer open={open} anchor=\"right\" variant=\"persistent\">\n      <Inner>\n        <Header>\n          <Typography component=\"h3\">{caption}</Typography>\n          <CloseButton aria-label=\"close\" onClick={onClose}>\n            <CloseIcon />\n          </CloseButton>\n        </Header>\n        <div>{children}</div>\n      </Inner>\n    </MuiDrawer>\n  );\n};\n\nexport default Drawer;\n\nconst Inner = styled.div`\n  margin-top: 64px;\n`;\n\nconst Header = styled.head`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 20px;\n`;\n\nconst CloseButton = styled(IconButton)`\n  margin-left: 10px 5px;\n`;\n","export default {\r\n  create: \"create\",\r\n  edit: \"edit\",\r\n  delete: \"delete\",\r\n  view: \"view\",\r\n  redistribute: \"redistribute\",\r\n  void: null\r\n};\r\n","import Storage, { StorageWithProducts } from \"models/Storage\";\nimport uuid from \"uuid\";\n\nclass StorageService {\n  createStorage(storage: StorageWithProducts) {\n    return new Promise<StorageWithProducts>(resolve =>\n      setTimeout(() => {\n        const newStorage = { ...storage, id: uuid() };\n        resolve(newStorage);\n      }, 500)\n    );\n  }\n\n  updateStorage(storage: StorageWithProducts) {\n    return new Promise<StorageWithProducts>(resolve =>\n      setTimeout(() => {\n        const updatedStorage = { ...storage };\n        resolve(updatedStorage);\n      }, 500)\n    );\n  }\n\n  deleteStorage(storage: Storage) {\n    return new Promise<Storage>(resolve =>\n      setTimeout(() => resolve(storage), 100)\n    );\n  }\n}\n\nexport default new StorageService();\n","import { createDomain } from \"effector\";\n\nimport StorageProduct from \"models/StorageProduct\";\nimport { StorageWithProducts } from \"models/Storage\";\nimport { ProductByStorages } from \"models/Product\";\n\nconst StorageProductDomain = createDomain();\n\nexport const addAllocation = StorageProductDomain.event<StorageProduct>();\nexport const deleteAllocation = StorageProductDomain.event<StorageProduct>();\nexport const changeAllocationForStorage = StorageProductDomain.event<\n  StorageWithProducts\n>();\nexport const changeAllocationForProduct = StorageProductDomain.event<\n  ProductByStorages\n>();\nexport const deleteAllocationForProduct = StorageProductDomain.event<{\n  id: string;\n}>();\nexport const redistributeStorage = StorageProductDomain.event<any>();\n\nconst initialState: StorageProduct[] = [];\n\nexport interface StorageState {\n  storages: Storage[];\n}\n\nexport const StoragesProductsStore = StorageProductDomain.store<\n  StorageProduct[]\n>(initialState)\n  .on(addAllocation, (state, payload) => [...state, payload])\n  .on(deleteAllocation, (state, payload) =>\n    state.filter(\n      storage =>\n        storage.productId !== payload.productId &&\n        storage.storageId !== payload.storageId\n    )\n  )\n  .on(changeAllocationForStorage, (state, payload) => {\n    const { id: storageId, products } = payload;\n    const storagesWithoutCurrent = state.filter(\n      storage => storage.storageId !== storageId\n    );\n    const newAllocation = products.map(product => ({\n      storageId,\n      ...product\n    }));\n\n    return [...storagesWithoutCurrent, ...newAllocation];\n  })\n  .on(changeAllocationForProduct, (state, payload) => {\n    const { id: productId, storages } = payload;\n\n    const productsWithoutCurrent = state.filter(\n      product => product.productId !== productId\n    );\n    const newAllocation = storages.map(storage => ({\n      productId,\n      ...storage\n    }));\n\n    return [...productsWithoutCurrent, ...newAllocation];\n  })\n  .on(deleteAllocationForProduct, (state, payload) => {\n    const { id: productId } = payload;\n    const productsWithoutCurrent = state.filter(\n      product => product.productId !== productId\n    );\n\n    return [...productsWithoutCurrent];\n  })\n  .on(redistributeStorage, (state, payload) => {\n    const {\n      storage: { id: storageId },\n      allocation\n    } = payload;\n\n    const storagesWithoutCurrent = state.filter(\n      storage => storage.storageId !== storageId\n    );\n    const allocationWithoutVoidStorage = allocation.filter(\n      (storage: StorageProduct) => storage.storageId !== \"void\"\n    );\n\n    return [...storagesWithoutCurrent, ...allocationWithoutVoidStorage];\n  });\n","import { createDomain } from \"effector\";\nimport uuid from \"uuid\";\n\nimport Storage, { StorageWithProducts } from \"models/Storage\";\nimport StorageSerivce from \"services/StorageSerivce\";\nimport {\n  addAllocation,\n  changeAllocationForStorage\n} from \"store/storagesProducts\";\n\nconst StorageDomain = createDomain();\n\nexport const createStorage = StorageDomain.effect<\n  StorageWithProducts,\n  StorageWithProducts,\n  Error\n>();\nexport const updateStorage = StorageDomain.effect<\n  StorageWithProducts,\n  StorageWithProducts,\n  Error\n>();\nexport const deleteStorage = StorageDomain.effect<Storage, Storage, Error>();\n\ncreateStorage.use(StorageSerivce.createStorage);\nupdateStorage.use(StorageSerivce.updateStorage);\ndeleteStorage.use(StorageSerivce.deleteStorage);\n\nconst initialState: Storage[] = [\n  {\n    id: uuid(),\n    name: \"storage 1\"\n  },\n  {\n    id: uuid(),\n    name: \"storage 2\"\n  },\n  {\n    id: uuid(),\n    name: \"storage 3\"\n  }\n];\n\nexport interface StorageState {\n  storages: Storage[];\n}\n\nexport const StoragesStore = StorageDomain.store<Storage[]>(initialState)\n  .on(createStorage.done, (state, { result }) => {\n    const { products, ...storage } = result;\n\n    products &&\n      products.forEach(({ productId, quantity }: any) => {\n        addAllocation({\n          storageId: storage.id,\n          productId,\n          quantity\n        });\n      });\n\n    return [...state, storage];\n  })\n  .on(updateStorage.done, (state, { result }) => {\n    const { products, ...storage } = result;\n\n    changeAllocationForStorage(result);\n\n    const storagesWithoutUpdated = state.filter(\n      storage => storage.id !== result.id\n    );\n    return [...storagesWithoutUpdated, storage];\n  })\n  .on(deleteStorage.done, (state, { result }) =>\n    state.filter(storage => storage.id !== result.id)\n  );\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { FieldArray } from \"formik\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {\r\n  Grid,\r\n  Fab,\r\n  TextField,\r\n  IconButton,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem\r\n} from \"@material-ui/core\";\r\n\r\nimport { StorageIdWithQuantity } from \"models/StorageProduct\";\r\nimport Storage from \"models/Storage\";\r\n\r\ninterface Props {\r\n  storagesWithQuantity: StorageIdWithQuantity[];\r\n  storages: Storage[];\r\n  onChange: (event: React.ChangeEvent<any>) => void;\r\n}\r\n\r\nconst ProductStoragesFields: React.FC<Props> = ({\r\n  storagesWithQuantity,\r\n  storages,\r\n  onChange\r\n}): JSX.Element => {\r\n  return (\r\n    <FieldArray\r\n      name=\"storages\"\r\n      render={arrayHelpers => (\r\n        <>\r\n          <ProductsCaption>\r\n            <span>Storages</span>\r\n            <Fab\r\n              variant=\"extended\"\r\n              size=\"medium\"\r\n              aria-label=\"Add\"\r\n              onClick={() => arrayHelpers.push(\"\")}\r\n            >\r\n              <AddIcon />\r\n              Add\r\n            </Fab>\r\n          </ProductsCaption>\r\n\r\n          {storagesWithQuantity &&\r\n            storagesWithQuantity.length > 0 &&\r\n            storagesWithQuantity.map(\r\n              (storage: StorageIdWithQuantity, index: number) => (\r\n                <Grid container alignItems=\"center\" spacing={1}>\r\n                  <Grid item xs={6}>\r\n                    <FormControlSelect>\r\n                      <InputLabel htmlFor=\"storage-select\">Storage</InputLabel>\r\n                      <Select\r\n                        value={storage.storageId}\r\n                        inputProps={{\r\n                          name: `storages.${index}.storageId`,\r\n                          id: \"storage-select\"\r\n                        }}\r\n                        onChange={onChange}\r\n                        autoWidth\r\n                      >\r\n                        {storages.map(({ id, name }) => (\r\n                          <MenuItem key={id} value={id}>\r\n                            {name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControlSelect>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <TextField\r\n                      name={`storages.${index}.quantity`}\r\n                      label=\"Quantity\"\r\n                      margin=\"normal\"\r\n                      type=\"number\"\r\n                      onChange={onChange}\r\n                      value={storage.quantity}\r\n                      fullWidth\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                    <IconButton\r\n                      aria-label=\"delete\"\r\n                      onClick={() => arrayHelpers.remove(index)}\r\n                    >\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                  </Grid>\r\n                </Grid>\r\n              )\r\n            )}\r\n        </>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProductStoragesFields;\r\n\r\nconst ProductsCaption = styled.div`\r\n  color: gray;\r\n  font-weight: bold;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst FormControlSelect = styled(FormControl)`\r\n  width: 100%;\r\n  margin-top: 16px;\r\n  margin-bottom: 8px;\r\n`;\r\n","export function isEmpty(obj: any) {\n  if (!obj) {\n    return true;\n  } else if (Array.isArray(obj)) {\n    return obj.length === 0;\n  } else {\n    return Object.entries(obj).length === 0 && obj.constructor === Object;\n  }\n}\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { Typography } from \"@material-ui/core\";\n\nimport { isEmpty } from \"utils\";\n\ninterface FormError {\n  [field: string]: string;\n}\n\ninterface Props {\n  errors?: any;\n}\n\nfunction myStringify(\n  data: object,\n  space: string | number,\n  replacer?: ((key: string, value: any) => any) | (number | string)[] | null\n) {\n  return JSON.stringify(data, replacer as any, space).replace(\n    /({|}|\\[|\\]|null)/gi,\n    \"\"\n  );\n}\n\nconst FormErrors: React.FC<Props> = ({ errors }): JSX.Element | null => {\n  if (isEmpty(errors)) return null;\n\n  return (\n    <Wrapper>\n      <Typography component=\"h4\">Form has errors</Typography>\n      <pre>{myStringify(errors, 2)}</pre>\n    </Wrapper>\n  );\n};\n\nexport default FormErrors;\n\nconst Wrapper = styled.div`\n  color: red;\n`;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { Formik } from \"formik\";\nimport { useStore } from \"effector-react\";\nimport * as Yup from \"yup\";\nimport { Button, Paper, TextField, Grid } from \"@material-ui/core\";\n\nimport { StorageIdWithQuantity } from \"models/StorageProduct\";\nimport { StoragesStore } from \"store/storages\";\nimport ProductStoragesFields from \"../ProductStoragesFields\";\nimport FormErrors from \"components/FormErrors\";\nimport { isEmpty } from \"utils\";\n\ninterface Props {\n  initialValues: any;\n  onSubmit: (values: any) => void;\n  submitCaption: string;\n}\n\nconst validationSchema = Yup.lazy((values: any) => {\n  const { storages, totalQuantity } = values;\n\n  const storagesTotalQuantity = !isEmpty(storages)\n    ? storages.reduce(\n        (acc: number, storage: StorageIdWithQuantity) =>\n          (acc += storage.quantity),\n        0\n      )\n    : 0;\n\n  return Yup.object().shape({\n    name: Yup.string().required(\"Please input name\"),\n    totalQuantity: Yup.number()\n      .required(\"Total quantity is required\")\n      .min(0),\n    ...(storagesTotalQuantity > totalQuantity && {\n      allocation: Yup.string().required(\"Exceeded total quantity\")\n    })\n  });\n});\n\nconst ProductInstanceForm: React.FC<Props> = ({\n  initialValues,\n  submitCaption,\n  onSubmit\n}): JSX.Element => {\n  const storages = useStore(StoragesStore);\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      validateOnChange={false}\n      onSubmit={onSubmit}\n    >\n      {({ values, handleSubmit, handleChange, errors }) => (\n        <WrapperForm onSubmit={handleSubmit}>\n          <FormMessages>\n            {errors && <FormErrors errors={errors} />}\n          </FormMessages>\n\n          <FormContent>\n            <Grid container spacing={2}>\n              <Grid item xs={7}>\n                <TextField\n                  id=\"name\"\n                  label=\"Name\"\n                  margin=\"normal\"\n                  type=\"text\"\n                  onChange={handleChange}\n                  value={values.name}\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={5}>\n                <TextField\n                  id=\"totalQuantity\"\n                  label=\"Total Quantity\"\n                  margin=\"normal\"\n                  type=\"number\"\n                  onChange={handleChange}\n                  value={values.totalQuantity}\n                  fullWidth\n                />\n              </Grid>\n            </Grid>\n\n            <ProductsWrapper>\n              <ProductStoragesFields\n                storagesWithQuantity={values.storages}\n                storages={storages}\n                onChange={handleChange}\n              />\n            </ProductsWrapper>\n          </FormContent>\n\n          <SubmitButton\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n          >\n            {submitCaption}\n          </SubmitButton>\n        </WrapperForm>\n      )}\n    </Formik>\n  );\n};\n\nexport default ProductInstanceForm;\n\nconst WrapperForm = styled.form`\n  width: 500px;\n  margin: auto;\n`;\n\nconst FormContent = styled.div`\n  padding: 0 20px;\n`;\n\nconst FormMessages = styled.div`\n  margin: 0 20px;\n`;\n\nconst ProductsWrapper = styled(Paper)`\n  margin: 20px 0;\n  padding: 20px;\n`;\n\nconst SubmitButton = styled(Button)`\n  margin-top: 40px;\n  width: 100%;\n  border-radius: 0;\n`;\n","import Product, { ProductByStorages } from \"models/Product\";\nimport uuid from \"uuid\";\n\nclass ProductService {\n  createProduct(product: ProductByStorages) {\n    return new Promise<ProductByStorages>(resolve =>\n      setTimeout(() => {\n        const newStorage = { ...product, id: uuid() };\n        resolve(newStorage);\n      }, 500)\n    );\n  }\n\n  updateProduct(product: ProductByStorages) {\n    return new Promise<ProductByStorages>(resolve =>\n      setTimeout(() => {\n        const updatedStorage = { ...product };\n        resolve(updatedStorage);\n      }, 500)\n    );\n  }\n\n  deleteProduct(product: Product) {\n    return new Promise<Product>(resolve =>\n      setTimeout(() => resolve(product), 100)\n    );\n  }\n}\n\nexport default new ProductService();\n","import uuid from \"uuid\";\r\nimport Product from \"models/Product\";\r\n\r\ninterface SeedProductArgs {\r\n  name: string;\r\n  totalQuantity: number;\r\n}\r\n\r\nexport function seedProduct({ name, totalQuantity }: SeedProductArgs): Product {\r\n  return {\r\n    id: uuid(),\r\n    name,\r\n    totalQuantity\r\n  };\r\n}\r\n","import { createDomain } from \"effector\";\n\nimport Product, { ProductByStorages } from \"models/Product\";\nimport ProductService from \"services/ProductService\";\nimport {\n  addAllocation,\n  changeAllocationForProduct,\n  deleteAllocationForProduct\n} from \"store/storagesProducts\";\nimport { seedProduct } from \"utils/seeds\";\n\nconst ProductDomain = createDomain();\n\nexport const createProduct = ProductDomain.effect<\n  ProductByStorages,\n  ProductByStorages,\n  Error\n>();\nexport const updateProduct = ProductDomain.effect<\n  ProductByStorages,\n  ProductByStorages,\n  Error\n>();\nexport const deleteProduct = ProductDomain.effect<Product, Product, Error>();\n\ncreateProduct.use(ProductService.createProduct);\nupdateProduct.use(ProductService.updateProduct);\ndeleteProduct.use(ProductService.deleteProduct);\n\nconst initialState: Product[] = [\n  seedProduct({ name: \"product 1\", totalQuantity: 10 }),\n  seedProduct({ name: \"product 2\", totalQuantity: 20 }),\n  seedProduct({ name: \"product 3\", totalQuantity: 30 })\n];\n\nexport interface ProductState {\n  storages: Product[];\n}\n\nexport const ProductsStore = ProductDomain.store<Product[]>(initialState)\n  .on(createProduct.done, (state, { result }) => {\n    const { storages, ...product } = result;\n\n    storages &&\n      storages.forEach(({ storageId, quantity }: any) => {\n        addAllocation({\n          productId: product.id,\n          storageId,\n          quantity\n        });\n      });\n\n    return [...state, product];\n  })\n  .on(updateProduct.done, (state, { result }) => {\n    const { storages, ...product } = result;\n\n    changeAllocationForProduct(result);\n\n    const storagesWithoutUpdated = state.filter(\n      product => product.id !== result.id\n    );\n    return [...storagesWithoutUpdated, product];\n  })\n  .on(deleteProduct.done, (state, { result }) => {\n    deleteAllocationForProduct({ id: result.id });\n\n    return state.filter(product => product.id !== result.id);\n  });\n","import * as React from \"react\";\nimport {\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  Badge,\n  Tooltip,\n  Divider\n} from \"@material-ui/core\";\nimport { useStore } from \"effector-react\";\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\nimport Product from \"models/Product\";\nimport { ProductsStore } from \"store/products\";\nimport { StoragesProductsStore } from \"store/storagesProducts\";\n\nconst MAX_SHOWN_COUNT = 1000;\n\ninterface Props {\n  onEdit: (product: any) => void;\n  onDelete: (product: Product) => void;\n  onView: (product: Product) => void;\n}\n\nconst Products: React.FC<Props> = ({\n  onEdit,\n  onDelete,\n  onView\n}): JSX.Element => {\n  const products = useStore(ProductsStore);\n  const storagesProducts = useStore(StoragesProductsStore);\n\n  return (\n    <List>\n      {products.map((product, index) => {\n        let storagesCount = 0;\n        let productsTotalQuantity = 0;\n        const storages: any[] = [];\n        const { id, name, totalQuantity } = product;\n\n        storagesProducts.forEach(({ storageId, productId, quantity }) => {\n          if (productId === product.id) {\n            storages.push({ storageId, quantity });\n            storagesCount++;\n            productsTotalQuantity += quantity;\n          }\n        });\n\n        return (\n          <React.Fragment key={id}>\n            <ListItem button onClick={() => onView(product)}>\n              <ListItemAvatar>\n                <Tooltip title={`Total quantity of product: ${totalQuantity}`}>\n                  <Badge\n                    badgeContent={totalQuantity}\n                    color=\"primary\"\n                    max={MAX_SHOWN_COUNT}\n                    anchorOrigin={{\n                      horizontal: \"left\",\n                      vertical: \"bottom\"\n                    }}\n                  >\n                    <ShoppingCartIcon />\n                  </Badge>\n                </Tooltip>\n              </ListItemAvatar>\n\n              <ListItemText\n                primary={name}\n                secondary={`Storages: ${storagesCount}, Quantity in strages: ${productsTotalQuantity}`}\n              />\n              <ListItemSecondaryAction>\n                <IconButton\n                  onClick={() => {\n                    onDelete(product);\n                  }}\n                >\n                  <DeleteIcon />\n                </IconButton>\n                <IconButton\n                  onClick={() => {\n                    onEdit({ ...product, storages });\n                  }}\n                >\n                  <EditIcon />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n            {index < products.length - 1 && <Divider />}\n          </React.Fragment>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default Products;\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\ninterface Props {\r\n  onDelete: () => void;\r\n}\r\n\r\nconst ProductDeleteConfirm: React.FC<Props> = ({ onDelete }): JSX.Element => {\r\n  return (\r\n    <>\r\n      <PlaceholderText>\r\n        <div>Are you shure to delete the product? </div>\r\n        <div>It will removed from all storages.</div>\r\n      </PlaceholderText>\r\n      <ActionButton\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        onClick={onDelete}\r\n      >\r\n        delete\r\n      </ActionButton>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductDeleteConfirm;\r\n\r\nconst ActionButton = styled(Button)`\r\n  margin-top: 40px;\r\n  width: 100%;\r\n  border-radius: 0;\r\n`;\r\n\r\nconst PlaceholderText = styled.div`\r\n  text-align: center;\r\n`;\r\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar\n} from \"@material-ui/core\";\nimport Product from \"models/Product\";\nimport { useStore } from \"effector-react\";\nimport StoreIcon from \"@material-ui/icons/Store\";\n\nimport { StoragesProductsStore } from \"store/storagesProducts\";\nimport { isEmpty } from \"utils\";\nimport { StoragesStore } from \"store/storages\";\n\ninterface Props {\n  product: Product;\n}\n\nconst ProductDetails: React.FC<Props> = ({ product }): JSX.Element | null => {\n  const storagesProducts = useStore(StoragesProductsStore);\n  const storages = useStore(StoragesStore);\n  const productAllocation = storagesProducts.filter(\n    allocation => allocation.productId === product.id\n  );\n\n  return (\n    <Wrapper>\n      <CommonInfo>Total quantity: {product.totalQuantity}</CommonInfo>\n      {!isEmpty(productAllocation) ? (\n        <List>\n          {productAllocation.map(({ productId, storageId, quantity }) => {\n            const storage = storages.find(({ id }) => id === storageId) || {\n              name: \"\"\n            };\n\n            return (\n              <ListItem key={storageId + productId} button>\n                <ListItemAvatar>\n                  <StoreIcon />\n                </ListItemAvatar>\n                <ListItemText>\n                  {storage.name}: {quantity}\n                </ListItemText>\n              </ListItem>\n            );\n          })}\n        </List>\n      ) : (\n        <Placeholder>Product isn't allocated</Placeholder>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ProductDetails;\n\nconst Wrapper = styled.div`\n  width: 250px;\n`;\n\nconst CommonInfo = styled.div`\n  margin: 5px 20px;\n`;\n\nconst Placeholder = styled.div`\n  margin: 20px;\n  color: lightgray;\n`;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { Divider } from \"@material-ui/core\";\n\nimport Dialog from \"components/Dialog\";\nimport Drawer from \"components/Drawer/Drawer\";\nimport instanceOperations from \"constants/instanceOperations\";\nimport Product, { ProductByStorages } from \"models/Product\";\n\nimport ProductInstanceForm from \"./components/ProductInstanceForm\";\nimport ProductsList from \"./components/ProductsList\";\nimport { deleteProduct, createProduct, updateProduct } from \"store/products\";\nimport ProductDeleteConfirm from \"./components/ProductDeleteConfirm\";\nimport ProductDetails from \"./components/ProductDetails\";\n\nconst emptyProduct = {\n  id: \"\",\n  name: \"\",\n  totalQuantity: 1,\n  storages: [\n    {\n      storageId: \"\",\n      quantity: 0\n    }\n  ]\n};\n\nconst DIALOG_TITLES = {\n  [instanceOperations.create]: \"Creating product\",\n  [instanceOperations.edit]: \"Editing product\",\n  [instanceOperations.delete]: \"Deleting product\"\n};\n\nconst SUBMIT_CAPTIONS = {\n  [instanceOperations.create]: \"Create\",\n  [instanceOperations.delete]: \"Delete\",\n  [instanceOperations.edit]: \"Update\"\n};\n\nconst Products: React.FC = () => {\n  const [instanceOperation, setInstanceOperation] = React.useState<\n    string | null\n  >(instanceOperations.void);\n  const [currentProduct, setCurrentProduct] = React.useState<ProductByStorages>(\n    emptyProduct\n  );\n\n  const handleOpenAddDialog = () => {\n    setInstanceOperation(instanceOperations.create);\n    setCurrentProduct(emptyProduct);\n  };\n\n  const handleCloseDialog = () => {\n    setInstanceOperation(instanceOperations.void);\n  };\n\n  const handleDelete = (product: Product) => () => {\n    deleteProduct(product);\n    setInstanceOperation(instanceOperations.void);\n  };\n\n  const handleOpenDelete = (product: any) => {\n    setInstanceOperation(instanceOperations.delete);\n    setCurrentProduct(product);\n  };\n\n  const handleOpenEdit = (product: any) => {\n    setInstanceOperation(instanceOperations.edit);\n    setCurrentProduct(product);\n  };\n\n  const handleSubmitCreate = (productByStorages: ProductByStorages) => {\n    createProduct(productByStorages);\n    setInstanceOperation(instanceOperations.void);\n  };\n\n  const handleSubmitUpdate = (productByStorages: ProductByStorages) => {\n    updateProduct(productByStorages);\n    setInstanceOperation(instanceOperations.void);\n  };\n\n  const handleOpenDetails = (product: any) => {\n    setInstanceOperation(instanceOperations.view);\n    setCurrentProduct(product);\n  };\n\n  const handleCloseDetails = () => {\n    setInstanceOperation(instanceOperations.void);\n  };\n\n  const isCreate = instanceOperation === instanceOperations.create;\n  const isEdit = instanceOperation === instanceOperations.edit;\n  const isDelete = instanceOperation === instanceOperations.delete;\n  const isDialogOpen = isCreate || isEdit || isDelete;\n  const isView = instanceOperation === instanceOperations.view;\n\n  return (\n    <Wrapper>\n      <Fab\n        variant=\"extended\"\n        size=\"medium\"\n        color=\"primary\"\n        aria-label=\"Add\"\n        onClick={handleOpenAddDialog}\n      >\n        <AddIcon />\n        Add product\n      </Fab>\n      <ToolbarDivider />\n      <ProductsList\n        onDelete={handleOpenDelete}\n        onEdit={handleOpenEdit}\n        onView={handleOpenDetails}\n      />\n\n      <Dialog\n        onClose={handleCloseDialog}\n        title={DIALOG_TITLES[instanceOperation || \"\"]}\n        open={isDialogOpen}\n        transitionDuration={{\n          exit: 0\n        }}\n      >\n        {isDelete ? (\n          <ProductDeleteConfirm onDelete={handleDelete(currentProduct)} />\n        ) : (\n          <ProductInstanceForm\n            initialValues={currentProduct}\n            onSubmit={isEdit ? handleSubmitUpdate : handleSubmitCreate}\n            submitCaption={SUBMIT_CAPTIONS[instanceOperation || \"\"]}\n          />\n        )}\n      </Dialog>\n      <Drawer\n        open={isView}\n        onClose={handleCloseDetails}\n        caption={currentProduct.name}\n      >\n        <ProductDetails product={currentProduct} />\n      </Drawer>\n    </Wrapper>\n  );\n};\n\nexport default Products;\n\nconst Wrapper = styled.div`\n  width: 100%;\n`;\n\nconst ToolbarDivider = styled(Divider)`\n  margin: 20px 0;\n`;\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { FieldArray } from \"formik\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {\r\n  Grid,\r\n  Fab,\r\n  TextField,\r\n  IconButton,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem\r\n} from \"@material-ui/core\";\r\n\r\nimport { ProductIdWithQuantity } from \"models/StorageProduct\";\r\nimport Product from \"models/Product\";\r\n\r\ninterface Props {\r\n  productsWithQuantity: ProductIdWithQuantity[];\r\n  products: Product[];\r\n  onChange: (event: React.ChangeEvent<any>) => void;\r\n}\r\n\r\nconst StorageProductsFields: React.FC<Props> = ({\r\n  productsWithQuantity,\r\n  products,\r\n  onChange\r\n}): JSX.Element => {\r\n  return (\r\n    <FieldArray\r\n      name=\"products\"\r\n      render={arrayHelpers => (\r\n        <>\r\n          <ProductsCaption>\r\n            <span>Products</span>\r\n            <Fab\r\n              variant=\"extended\"\r\n              size=\"medium\"\r\n              aria-label=\"Add\"\r\n              onClick={() => arrayHelpers.push(\"\")}\r\n            >\r\n              <AddIcon />\r\n              Add\r\n            </Fab>\r\n          </ProductsCaption>\r\n\r\n          {productsWithQuantity &&\r\n            productsWithQuantity.length > 0 &&\r\n            productsWithQuantity.map(\r\n              (product: ProductIdWithQuantity, index: number) => (\r\n                <Grid container alignItems=\"center\" spacing={1}>\r\n                  <Grid item xs={6}>\r\n                    <FormControlSelect>\r\n                      <InputLabel htmlFor=\"product-select\">Product</InputLabel>\r\n                      <Select\r\n                        value={product.productId}\r\n                        inputProps={{\r\n                          name: `products.${index}.productId`,\r\n                          id: \"product-select\"\r\n                        }}\r\n                        onChange={onChange}\r\n                        autoWidth\r\n                      >\r\n                        {products.map(({ id, name }) => (\r\n                          <MenuItem key={id} value={id}>\r\n                            {name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControlSelect>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <TextField\r\n                      name={`products.${index}.quantity`}\r\n                      label=\"Quantity\"\r\n                      margin=\"normal\"\r\n                      type=\"number\"\r\n                      onChange={onChange}\r\n                      value={product.quantity}\r\n                      fullWidth\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                    <IconButton\r\n                      aria-label=\"delete\"\r\n                      onClick={() => arrayHelpers.remove(index)}\r\n                    >\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                  </Grid>\r\n                </Grid>\r\n              )\r\n            )}\r\n        </>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StorageProductsFields;\r\n\r\nconst ProductsCaption = styled.div`\r\n  color: gray;\r\n  font-weight: bold;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst FormControlSelect = styled(FormControl)`\r\n  width: 100%;\r\n  margin-top: 16px;\r\n  margin-bottom: 8px;\r\n`;\r\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Button, Paper, TextField } from \"@material-ui/core\";\r\nimport { useStore } from \"effector-react\";\r\n\r\nimport { ProductsStore } from \"store/products\";\r\nimport FormErrors from \"components/FormErrors\";\r\nimport StorageProductsFields from \"../StorageProductsFields\";\r\nimport { StoragesProductsStore } from \"store/storagesProducts\";\r\nimport { isEmpty } from \"utils\";\r\nimport { ProductIdWithQuantity } from \"models/StorageProduct\";\r\n\r\ninterface Props {\r\n  initialValues: any;\r\n  onSubmit: (values: any) => void;\r\n  submitCaption: string;\r\n}\r\n\r\nconst StorageInstanceForm: React.FC<Props> = ({\r\n  initialValues,\r\n  submitCaption,\r\n  onSubmit\r\n}): JSX.Element => {\r\n  const products = useStore(ProductsStore);\r\n  const storagesProducts = useStore(StoragesProductsStore);\r\n\r\n  const validationSchema = Yup.lazy((values: any) => {\r\n    const { products: productsIdWithQuantity } = values;\r\n    const allocationErrors: { [field: string]: any } = {};\r\n\r\n    if (!isEmpty(products)) {\r\n      productsIdWithQuantity.forEach(\r\n        ({ productId, quantity }: ProductIdWithQuantity) => {\r\n          const foundProduct = products.find(({ id }) => id === productId) || {\r\n            totalQuantity: 0,\r\n            name: \"\"\r\n          };\r\n          const quantityAllocated = storagesProducts.reduce((acc, record) => {\r\n            if (record.productId === productId) {\r\n              acc += record.quantity;\r\n            }\r\n\r\n            return acc;\r\n          }, 0);\r\n          const unallocatedQuantity =\r\n            foundProduct.totalQuantity - quantityAllocated;\r\n\r\n          if (quantity > unallocatedQuantity) {\r\n            allocationErrors[foundProduct.name] = Yup.string().required(\r\n              `Quantity exceeded. Available only: ${unallocatedQuantity}`\r\n            );\r\n          }\r\n        }\r\n      );\r\n    }\r\n\r\n    return Yup.object().shape({\r\n      name: Yup.string().required(\"Please input name\"),\r\n      ...allocationErrors\r\n    });\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      onSubmit={onSubmit}\r\n    >\r\n      {({ values, handleSubmit, handleChange, errors }) => (\r\n        <WrapperForm onSubmit={handleSubmit}>\r\n          <FormMessages>\r\n            {errors && <FormErrors errors={errors} />}\r\n          </FormMessages>\r\n\r\n          <FormContent>\r\n            <TextField\r\n              id=\"name\"\r\n              label=\"Name\"\r\n              margin=\"normal\"\r\n              type=\"text\"\r\n              onChange={handleChange}\r\n              value={values.name}\r\n              fullWidth\r\n            />\r\n\r\n            <ProductsWrapper>\r\n              <StorageProductsFields\r\n                productsWithQuantity={values.products}\r\n                products={products}\r\n                onChange={handleChange}\r\n              />\r\n            </ProductsWrapper>\r\n          </FormContent>\r\n\r\n          <SubmitButton\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n          >\r\n            {submitCaption}\r\n          </SubmitButton>\r\n        </WrapperForm>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default StorageInstanceForm;\r\n\r\nconst FormMessages = styled.div`\r\n  margin: 0 20px;\r\n`;\r\n\r\nconst WrapperForm = styled.form`\r\n  width: 500px;\r\n  margin: auto;\r\n`;\r\n\r\nconst FormContent = styled.div`\r\n  padding: 0 20px;\r\n`;\r\n\r\nconst ProductsWrapper = styled(Paper)`\r\n  margin: 20px 0;\r\n  padding: 20px;\r\n`;\r\n\r\nconst SubmitButton = styled(Button)`\r\n  margin-top: 40px;\r\n  width: 100%;\r\n  border-radius: 0;\r\n`;\r\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { FieldArray } from \"formik\";\nimport {\n  Grid,\n  TextField,\n  Select,\n  FormControl,\n  InputLabel,\n  MenuItem\n} from \"@material-ui/core\";\n\nimport StorageProduct from \"models/StorageProduct\";\nimport Product from \"models/Product\";\nimport Storage from \"models/Storage\";\n\ninterface Props {\n  allocation: any[];\n  products: Product[];\n  storages: Storage[];\n  onChange: (event: React.ChangeEvent<any>) => void;\n  disabled?: {\n    product?: boolean;\n    storage?: boolean;\n    quantity?: boolean;\n  };\n}\n\nconst StorageRedistributionFields: React.FC<Props> = ({\n  allocation,\n  storages,\n  products,\n  disabled,\n  onChange\n}): JSX.Element => {\n  return (\n    <FieldArray\n      name=\"allocation\"\n      render={arrayHelpers => (\n        <>\n          {allocation &&\n            allocation.length > 0 &&\n            allocation.map((allocation: StorageProduct, index: number) => (\n              <Grid container alignItems=\"center\" spacing={1}>\n                <Grid item xs={4}>\n                  <FormControlSelect>\n                    <InputLabel htmlFor=\"storage-select\">Storage</InputLabel>\n                    <Select\n                      value={allocation.storageId}\n                      inputProps={{\n                        name: `allocation.${index}.storageId`,\n                        id: \"storage-select\"\n                      }}\n                      onChange={onChange}\n                      disabled={disabled && disabled.storage}\n                      autoWidth\n                    >\n                      {storages.map(({ id, name }) => (\n                        <MenuItem key={id} value={id}>\n                          {name}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControlSelect>\n                </Grid>\n                <Grid item xs={4}>\n                  <FormControlSelect>\n                    <InputLabel htmlFor=\"product-select\">Product</InputLabel>\n                    <Select\n                      value={allocation.productId}\n                      inputProps={{\n                        name: `allocation.${index}.productId`,\n                        id: \"product-select\"\n                      }}\n                      onChange={onChange}\n                      disabled={disabled && disabled.product}\n                      autoWidth\n                    >\n                      {products.map(({ id, name }) => (\n                        <MenuItem key={id} value={id}>\n                          {name}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControlSelect>\n                </Grid>\n                <Grid item xs={4}>\n                  <TextField\n                    name={`allocation.${index}.quantity`}\n                    label=\"Quantity\"\n                    margin=\"normal\"\n                    type=\"number\"\n                    onChange={onChange}\n                    value={allocation.quantity}\n                    disabled={disabled && disabled.quantity}\n                    fullWidth\n                  />\n                </Grid>\n              </Grid>\n            ))}\n        </>\n      )}\n    />\n  );\n};\n\nexport default StorageRedistributionFields;\n\nconst FormControlSelect = styled(FormControl)`\n  width: 100%;\n  margin-top: 16px;\n  margin-bottom: 8px;\n`;\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { useStore } from \"effector-react\";\r\n\r\nimport Storage from \"models/Storage\";\r\nimport { ProductsStore } from \"store/products\";\r\nimport { StoragesStore } from \"store/storages\";\r\nimport { StoragesProductsStore } from \"store/storagesProducts\";\r\nimport StorageRedistributionFields from \"../StorageRedistributionFields\";\r\nimport FormErrors from \"components/FormErrors\";\r\nimport { isEmpty } from \"utils\";\r\n\r\ninterface Props {\r\n  submitCaption: string;\r\n  storage: Storage;\r\n  onSubmit: (values: any, storage: Storage) => void;\r\n  onDelete: (storage: Storage) => void;\r\n}\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  allocation: Yup.array().of(\r\n    Yup.object().shape({\r\n      storageId: Yup.string().required(\r\n        \"Please select a specific storage for the product\"\r\n      )\r\n    })\r\n  )\r\n});\r\n\r\nconst StorageRedistributionForm: React.FC<Props> = ({\r\n  submitCaption,\r\n  storage,\r\n  onSubmit,\r\n  onDelete\r\n}): JSX.Element => {\r\n  const products = useStore(ProductsStore);\r\n  const storages = useStore(StoragesStore);\r\n  const allocation = useStore(StoragesProductsStore);\r\n  const storageAllocation = allocation\r\n    .filter(({ storageId }) => storageId === storage.id)\r\n    .map(allocation => ({ ...allocation, storageId: \"\" }));\r\n  const storagesWithoutDistributed = storages.filter(\r\n    ({ id }) => id !== storage.id\r\n  );\r\n\r\n  storagesWithoutDistributed.unshift({\r\n    id: \"void\",\r\n    name: \"Unallocated\"\r\n  });\r\n\r\n  const handleFormSubmit = (values: any) => {\r\n    onSubmit(values.allocation, storage);\r\n  };\r\n\r\n  const handleDelete = (_event: React.MouseEvent<HTMLButtonElement>) => {\r\n    onDelete(storage);\r\n  };\r\n\r\n  if (isEmpty(storageAllocation)) {\r\n    return (\r\n      <>\r\n        <PlaceholderText>\r\n          The storage is empty. Do you want to remove it?\r\n        </PlaceholderText>\r\n        <SubmitButton\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"large\"\r\n          onClick={handleDelete}\r\n        >\r\n          delete\r\n        </SubmitButton>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ allocation: storageAllocation }}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      onSubmit={handleFormSubmit}\r\n    >\r\n      {({ values, handleSubmit, handleChange, errors }) => (\r\n        <WrapperForm onSubmit={handleSubmit}>\r\n          <FormMessages>\r\n            {errors && <FormErrors errors={errors.allocation} />}\r\n          </FormMessages>\r\n\r\n          <FormContent>\r\n            <StorageRedistributionFields\r\n              allocation={values.allocation}\r\n              products={products}\r\n              storages={storagesWithoutDistributed}\r\n              disabled={{\r\n                product: true,\r\n                quantity: true\r\n              }}\r\n              onChange={handleChange}\r\n            />\r\n          </FormContent>\r\n          <SubmitButton\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n          >\r\n            {submitCaption}\r\n          </SubmitButton>\r\n        </WrapperForm>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default StorageRedistributionForm;\r\n\r\nconst WrapperForm = styled.form`\r\n  width: 600px;\r\n  margin: auto;\r\n`;\r\n\r\nconst FormMessages = styled.div`\r\n  margin: 0 20px;\r\n`;\r\n\r\nconst FormContent = styled.div`\r\n  padding: 0 20px;\r\n`;\r\n\r\nconst SubmitButton = styled(Button)`\r\n  margin-top: 40px;\r\n  width: 100%;\r\n  border-radius: 0;\r\n`;\r\n\r\nconst PlaceholderText = styled.div`\r\n  text-align: center;\r\n`;\r\n","import * as React from \"react\";\nimport {\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  Divider\n} from \"@material-ui/core\";\nimport { useStore } from \"effector-react\";\nimport StoreIcon from \"@material-ui/icons/Store\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\nimport Storage from \"models/Storage\";\nimport { StoragesStore } from \"store/storages\";\nimport { StoragesProductsStore } from \"store/storagesProducts\";\n\ninterface Props {\n  onEdit: (storage: any) => void;\n  onDelete: (storage: Storage) => void;\n  onView: (storage: Storage) => void;\n}\n\nconst StoragesList: React.FC<Props> = ({\n  onEdit,\n  onDelete,\n  onView\n}): JSX.Element => {\n  const storages = useStore(StoragesStore);\n  const storagesProducts = useStore(StoragesProductsStore);\n\n  return (\n    <List>\n      {storages.map((storage, index) => {\n        let productsCount = 0;\n        let productsTotalQuantity = 0;\n        const products: any[] = [];\n\n        storagesProducts.forEach(({ storageId, productId, quantity }) => {\n          if (storageId === storage.id) {\n            products.push({ productId, quantity });\n            productsCount++;\n            productsTotalQuantity += quantity;\n          }\n        });\n\n        return (\n          <React.Fragment key={storage.id}>\n            <ListItem button onClick={() => onView(storage)}>\n              <ListItemAvatar>\n                <StoreIcon />\n              </ListItemAvatar>\n              <ListItemText\n                primary={storage.name}\n                secondary={`Product positions: ${productsCount}, Total quantity: ${productsTotalQuantity}`}\n              />\n              <ListItemSecondaryAction>\n                <IconButton\n                  onClick={() => {\n                    onDelete(storage);\n                  }}\n                >\n                  <DeleteIcon />\n                </IconButton>\n                <IconButton\n                  onClick={() => {\n                    onEdit({ ...storage, products });\n                  }}\n                >\n                  <EditIcon />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n            {index < storages.length - 1 && <Divider />}\n          </React.Fragment>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default StoragesList;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar\n} from \"@material-ui/core\";\nimport { useStore } from \"effector-react\";\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\n\nimport Storage from \"models/Storage\";\nimport { StoragesProductsStore } from \"store/storagesProducts\";\nimport { isEmpty } from \"utils\";\nimport { ProductsStore } from \"store/products\";\n\ninterface Props {\n  storage: Storage;\n}\n\nconst StorageDetails: React.FC<Props> = ({ storage }): JSX.Element | null => {\n  const storagesProducts = useStore(StoragesProductsStore);\n  const products = useStore(ProductsStore);\n  const storageAllocation = storagesProducts.filter(\n    allocation => allocation.storageId === storage.id\n  );\n\n  return (\n    <Wrapper>\n      {!isEmpty(storageAllocation) ? (\n        <List>\n          {storageAllocation.map(({ productId, storageId, quantity }) => {\n            const product = products.find(({ id }) => id === productId) || {\n              name: \"\"\n            };\n\n            return (\n              <ListItem key={productId + storageId} button>\n                <ListItemAvatar>\n                  <ShoppingCartIcon />\n                </ListItemAvatar>\n                <ListItemText>\n                  {product.name}: {quantity}\n                </ListItemText>\n              </ListItem>\n            );\n          })}\n        </List>\n      ) : (\n        <Placeholder>Storage is empty</Placeholder>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default StorageDetails;\n\nconst Wrapper = styled.div`\n  width: 250px;\n`;\n\nconst Placeholder = styled.div`\n  margin: 20px;\n  color: lightgray;\n`;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { Divider } from \"@material-ui/core\";\n\nimport Dialog from \"components/Dialog\";\nimport Drawer from \"components/Drawer/Drawer\";\nimport instanceOperations from \"constants/instanceOperations\";\nimport Storage, { StorageWithProducts } from \"models/Storage\";\nimport { redistributeStorage } from \"store/storagesProducts\";\nimport { deleteStorage, createStorage, updateStorage } from \"store/storages\";\n\nimport StorageInstanceForm from \"./components/StorageInstanceForm\";\nimport StorageRedistributionForm from \"./components/StorageRedistributionForm\";\nimport StoragesList from \"./components/StoragesList\";\nimport StorageDetails from \"./components/StorageDetails\";\n\nconst emptyStorage = {\n  id: \"\",\n  name: \"\",\n  products: [\n    {\n      productId: \"\",\n      quantity: 0\n    }\n  ]\n};\n\nconst DIALOG_TITLES = {\n  [instanceOperations.create]: \"Creating storage\",\n  [instanceOperations.edit]: \"Editing storage\",\n  [instanceOperations.redistribute]: \"Redistribute before delete\"\n};\n\nconst SUBMIT_CAPTIONS = {\n  [instanceOperations.create]: \"Create\",\n  [instanceOperations.edit]: \"Update\",\n  [instanceOperations.redistribute]: \"Redestribute and delete\"\n};\n\nconst Storages: React.FC = () => {\n  const [instanceOperation, setInstanceOperation] = React.useState<\n    string | null\n  >(instanceOperations.void);\n  const [currentStorage, setCurrentStorage] = React.useState<\n    StorageWithProducts | Storage\n  >(emptyStorage);\n\n  const handleOpenAddDialog = () => {\n    setInstanceOperation(instanceOperations.create);\n    setCurrentStorage(emptyStorage);\n  };\n\n  const handleCloseDialog = () => {\n    setInstanceOperation(instanceOperations.void);\n  };\n\n  const handleOpenDelete = (storage: Storage) => {\n    setCurrentStorage(storage);\n    setInstanceOperation(instanceOperations.redistribute);\n  };\n\n  const handleOpenEdit = (storageWithProducts: any) => {\n    setInstanceOperation(instanceOperations.edit);\n    setCurrentStorage(storageWithProducts);\n  };\n\n  const handleSubmitCreate = (storageWithProducts: StorageWithProducts) => {\n    createStorage(storageWithProducts);\n    setInstanceOperation(instanceOperations.void);\n  };\n\n  const handleSubmitUpdate = (storageWithProducts: StorageWithProducts) => {\n    updateStorage(storageWithProducts);\n    setInstanceOperation(instanceOperations.void);\n  };\n\n  const handleRedistributeAndDelete = (values: any, storage: Storage) => {\n    redistributeStorage({ storage, allocation: values });\n    deleteStorage(storage);\n    setInstanceOperation(instanceOperations.void);\n  };\n\n  const handleDelete = (storage: Storage) => {\n    deleteStorage(storage);\n    setInstanceOperation(instanceOperations.void);\n  };\n\n  const handleOpenDetails = (storage: Storage) => {\n    setInstanceOperation(instanceOperations.view);\n    setCurrentStorage(storage);\n  };\n\n  const handleCloseDetails = () => {\n    setInstanceOperation(instanceOperations.void);\n  };\n\n  const isCreate = instanceOperation === instanceOperations.create;\n  const isRedistribute = instanceOperation === instanceOperations.redistribute;\n  const isEdit = instanceOperation === instanceOperations.edit;\n  const isDelete = instanceOperation === instanceOperations.delete;\n  const isDialogOpen = isCreate || isEdit || isDelete || isRedistribute;\n  const isView = instanceOperation === instanceOperations.view;\n\n  return (\n    <Wrapper>\n      <Fab\n        variant=\"extended\"\n        size=\"medium\"\n        color=\"primary\"\n        aria-label=\"Add\"\n        onClick={handleOpenAddDialog}\n      >\n        <AddIcon />\n        Add storage\n      </Fab>\n      <ToolbarDivider />\n      <StoragesList\n        onDelete={handleOpenDelete}\n        onEdit={handleOpenEdit}\n        onView={handleOpenDetails}\n      />\n      <Dialog\n        open={isDialogOpen}\n        onClose={handleCloseDialog}\n        title={instanceOperation && DIALOG_TITLES[instanceOperation]}\n        transitionDuration={{\n          exit: 0\n        }}\n      >\n        {instanceOperation === instanceOperations.redistribute ? (\n          <StorageRedistributionForm\n            submitCaption={SUBMIT_CAPTIONS[instanceOperation || \"\"]}\n            storage={currentStorage}\n            onSubmit={handleRedistributeAndDelete}\n            onDelete={handleDelete}\n          />\n        ) : (\n          <StorageInstanceForm\n            initialValues={currentStorage}\n            onSubmit={isEdit ? handleSubmitUpdate : handleSubmitCreate}\n            submitCaption={SUBMIT_CAPTIONS[instanceOperation || \"\"]}\n          />\n        )}\n      </Dialog>\n      <Drawer\n        open={isView}\n        onClose={handleCloseDetails}\n        caption={currentStorage.name}\n      >\n        <StorageDetails storage={currentStorage} />\n      </Drawer>\n    </Wrapper>\n  );\n};\n\nexport default Storages;\n\nconst Wrapper = styled.div`\n  width: 100%;\n`;\n\nconst ToolbarDivider = styled(Divider)`\n  margin: 20px 0;\n`;\n","import StoreIcon from \"@material-ui/icons/Store\";\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\n\nimport { Storages, Products } from \"./scenes\";\n\nexport default {\n  root: {\n    path: \"/\",\n    caption: \"Dashboard\"\n  },\n  app: {\n    products: {\n      path: \"/products\",\n      caption: \"Products\",\n      Icon: ShoppingCartIcon,\n      Scene: Products\n    },\n    storages: {\n      path: \"/storages\",\n      caption: \"Storages\",\n      Icon: StoreIcon,\n      Scene: Storages\n    }\n  },\n  auth: {\n    signin: {\n      path: \"/signin\"\n    }\n  }\n};\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport indigo from \"@material-ui/core/colors/indigo\";\nimport pink from \"@material-ui/core/colors/pink\";\nimport red from \"@material-ui/core/colors/red\";\n\nexport default createMuiTheme({\n  palette: {\n    primary: indigo,\n    secondary: pink,\n    error: red,\n    // Used by `getContrastText()` to maximize the contrast between the background and\n    // the text.\n    contrastThreshold: 3,\n    // Used to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2\n  }\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Cookies from \"js-cookie\";\nimport jwt from \"jwt-simple\";\n\nconst secret = \"storage-system-demo-app\";\n\nclass AuthService {\n  signin(signin: string, password: string) {\n    Cookies.set(\"token\", jwt.encode({ user: signin }, secret));\n  }\n\n  signout() {\n    Cookies.set(\"token\", \"\");\n  }\n\n  isAuthorized() {\n    const token = Cookies.get(\"token\");\n    return token;\n  }\n\n  get user() {\n    const token: string = Cookies.get(\"token\") || \"\";\n\n    return jwt.decode(token, secret).user;\n  }\n}\n\nexport default new AuthService();\n","import * as React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport AuthService from \"services/AuthService\";\n\ninterface Props {\n  component: any;\n  path: string;\n  redirectTo: string;\n}\n\nconst PrivateRoute: React.FC<Props> = ({\n  component: Component,\n  redirectTo,\n  ...rest\n}) => (\n  <Route\n    {...rest}\n    render={props =>\n      AuthService.isAuthorized() ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to={redirectTo} />\n      )\n    }\n  />\n);\n\nexport default PrivateRoute;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { Button, Badge } from \"@material-ui/core\";\n\ninterface Props {\n  children: React.ReactNode;\n  counter: number;\n  onClick: () => void;\n}\n\nconst FeatureWidget: React.FC<Props> = ({\n  children,\n  counter,\n  onClick\n}): JSX.Element => {\n  return (\n    <FeatureButton onClick={onClick} variant=\"contained\" color=\"primary\">\n      <Badge badgeContent={counter} color=\"secondary\">\n        {children}\n      </Badge>\n    </FeatureButton>\n  );\n};\n\nexport default FeatureWidget;\n\nconst FeatureButton = styled(Button)`\n  font-size: 30px;\n  width: 400px;\n  height: 400px;\n`;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport useReactRouter from \"use-react-router\";\nimport StoreIcon from \"@material-ui/icons/Store\";\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\n\nimport FeatureWidget from \"./components/FeatureWidget\";\nimport routes from \"routes\";\nimport { useStore } from \"effector-react\";\nimport { StoragesStore } from \"store/storages\";\nimport { ProductsStore } from \"store/products\";\n\nconst Dashboard: React.FC = (): JSX.Element => {\n  const { history } = useReactRouter();\n  const productsRoute = routes.app.products;\n  const storagesRoute = routes.app.storages;\n  const storages = useStore(StoragesStore);\n  const products = useStore(ProductsStore);\n\n  return (\n    <Wrapper>\n      <FeatureWidget\n        onClick={() => history.push(productsRoute.path, productsRoute.caption)}\n        counter={storages.length}\n      >\n        Products\n        <ProductsIcon />\n      </FeatureWidget>\n      <FeatureWidget\n        onClick={() => history.push(storagesRoute.path, storagesRoute.caption)}\n        counter={products.length}\n      >\n        Storages\n        <StoragesIcon />\n      </FeatureWidget>\n    </Wrapper>\n  );\n};\n\nexport default Dashboard;\n\nconst Wrapper = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  > :first-child {\n    margin-right: 20px;\n  }\n`;\n\nconst StoragesIcon = styled(StoreIcon)`\n  margin: 0 20px;\n  font-size: 60px;\n`;\n\nconst ProductsIcon = styled(ShoppingCartIcon)`\n  margin: 0 20px;\n  font-size: 60px;\n`;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport useReactRouter from \"use-react-router\";\nimport AccountBox from \"@material-ui/icons/AccountBox\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nimport AuthService from \"services/AuthService\";\nimport routes from \"routes\";\n\nconst User: React.FC = (): JSX.Element => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const { history } = useReactRouter();\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleSignOut = () => {\n    setAnchorEl(null);\n    AuthService.signout();\n    history.push(routes.auth.signin.path);\n  };\n\n  return (\n    <>\n      <UserButton onClick={handleClick}>\n        <UserIcon />\n        {AuthService.user}\n      </UserButton>\n      <UserMenu\n        anchorEl={anchorEl}\n        getContentAnchorEl={null}\n        onClose={handleClose}\n        open={Boolean(anchorEl)}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"left\"\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"left\"\n        }}\n        keepMounted\n      >\n        <MenuItem onClick={handleSignOut}>Sign out</MenuItem>\n      </UserMenu>\n    </>\n  );\n};\n\nexport default User;\n\nconst UserIcon = styled(AccountBox)`\n  font-size: 45px;\n  margin: 0 10px;\n`;\n\nconst UserButton = styled(Button)`\n  display: flex;\n  align-items: center;\n  color: #fff;\n`;\n\nconst UserMenu = styled(Menu)`\n  .MuiMenu-list {\n    display: flex;\n    flex-direction: column;\n    min-width: 160px;\n  }\n`;\n","import * as React from \"react\";\nimport List from \"@material-ui/core/List\";\n\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport Route from \"models/Route\";\nimport routes from \"routes\";\n\ninterface Props {\n  onChange: (path: string, caption: string) => void;\n}\n\nconst appRoutes: Route[] = Object.values(routes.app);\n\nconst SideMenu: React.FC<Props> = ({ onChange }): JSX.Element => (\n  <List>\n    {appRoutes.map(\n      ({ path, Icon, caption }): JSX.Element => (\n        <ListItem key={caption} onClick={() => onChange(path, caption)} button>\n          <ListItemIcon>\n            <Icon />\n          </ListItemIcon>\n          <ListItemText primary={caption} />\n        </ListItem>\n      )\n    )}\n  </List>\n);\n\nexport default SideMenu;\n","import * as React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Dashboard from \"@material-ui/icons/Dashboard\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\n\nimport User from \"./User\";\n\nimport SideMenu from \"./SideMenu\";\nimport routes from \"routes\";\n\nconst drawerWidth = 240;\n\ninterface Props {\n  children: React.ReactNode;\n  currentCaption: string;\n  onChangePath: (path: string, caption: string) => void;\n}\n\nconst AppLayout: React.FC<Props> = ({\n  children,\n  currentCaption,\n  onChangePath\n}): JSX.Element => {\n  const [open, setOpen] = React.useState(true);\n  const rootPath = routes.root;\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Wrapper>\n      <CssBaseline />\n      <TopBar position=\"absolute\" open={open}>\n        <TopToolbar>\n          {!open && (\n            <MenuButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n            >\n              <MenuIcon />\n            </MenuButton>\n          )}\n          <Title component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap>\n            {currentCaption}\n          </Title>\n          <User />\n        </TopToolbar>\n      </TopBar>\n      <LeftSideBar variant=\"permanent\" open={open}>\n        <Caption>\n          <Logo\n            color=\"primary\"\n            variant=\"h6\"\n            onClick={() => {\n              onChangePath(rootPath.path, rootPath.caption);\n            }}\n          >\n            <DashboardIcon />\n            Megastorage\n          </Logo>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </Caption>\n        <Divider />\n        <SideMenu onChange={onChangePath} />\n      </LeftSideBar>\n      <Content>\n        <ContentWrapper maxWidth=\"lg\">\n          <Grid container>{children}</Grid>\n        </ContentWrapper>\n      </Content>\n    </Wrapper>\n  );\n};\n\nexport default AppLayout;\n\nconst Wrapper = styled.div`\n  display: flex;\n`;\n\ninterface TopBarProps {\n  open: boolean;\n}\n\nconst TopBar = styled(AppBar)<TopBarProps>`\n  width: ${p => (p.open ? `calc(100% - ${drawerWidth}px)` : \"100%\")};\n  margin-left: ${drawerWidth}px;\n  z-index: 1201;\n  transition: width 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms,\n    margin 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms;\n`;\n\nconst TopToolbar = styled(Toolbar)`\n  padding-right: 24px;\n`;\n\nconst MenuButton = styled(IconButton)`\n  margin-right: 36px;\n`;\n\nconst LeftSideBar = styled(Drawer)`\n  .MuiDrawer-paper {\n    position: relative;\n\n    ${p =>\n      p.open\n        ? css`\n            white-space: nowrap;\n            width: 240px;\n            transition: width 225ms cubic-bezier(0.4, 0, 0.6, 1) 0ms;\n          `\n        : css`\n            logooverflow-x: hidden;\n            width: 72px;\n            transition: width 195ms cubic-bezier(0.4, 0, 0.6, 1) 0ms;\n          `}\n  }\n`;\n\nconst Title = styled(Typography)`\n  flex-grow: 1;\n`;\n\nconst Logo = styled(Typography)`\n  font-size: 16px;\n  cursor: pointer;\n  display: flex;\n  text-transform: uppercase;\n  font-weight: bold;\n  align-items: center;\n  text-shadow: 7px 5px #e4e4e4;\n`;\n\nconst DashboardIcon = styled(Dashboard)`\n  margin-right: 5px;\n`;\n\nconst Caption = styled.div`\n  display: flex;\n  padding: 0 8px;\n  align-items: center;\n  justify-content: space-between;\n  min-height: 64px;\n`;\n\nconst Content = styled.main`\n  flex-grow: 1;\n  height: 100vh;\n  overflow: auto;\n`;\n\nconst ContentWrapper = styled(Container)`\n  margin-top: 64px;\n  padding-top: 32px;\n  padding-bottom: 32px;\n`;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport useReactRouter from \"use-react-router\";\n\nimport Dashboard from \"scenes/Dashboard\";\nimport RouteModel from \"models/Route\";\nimport routes from \"routes\";\nimport AppLayout from \"layouts/AppLayout\";\n\nconst appRoutes: RouteModel[] = Object.values(routes.app);\n\nconst App: React.FC = () => {\n  const { history, location } = useReactRouter();\n  const [currentCaption, setCurrentCaption] = React.useState(location.state);\n\n  const handleChangePath = (path: string, caption: string) => {\n    history.push(path, caption);\n    setCurrentCaption(caption);\n  };\n\n  return (\n    <AppLayout onChangePath={handleChangePath} currentCaption={currentCaption}>\n      <Route exact path={routes.root.path} component={Dashboard} />\n      {appRoutes.map(({ path, Scene }) => (\n        <Route key={Scene} path={path} component={Scene} />\n      ))}\n    </AppLayout>\n  );\n};\n\nexport default App;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Container from \"@material-ui/core/Container\";\n\ninterface Props {\n  children: JSX.Element | JSX.Element[];\n}\n\nconst AuthLayout: React.FC<Props> = ({ children }): JSX.Element => {\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Content>\n        <AvatarWrapper>\n          <LockOutlinedIcon />\n        </AvatarWrapper>\n        {children}\n      </Content>\n    </Container>\n  );\n};\n\nexport default AuthLayout;\n\nconst Content = styled.div`\n  margintop: 100ox;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst AvatarWrapper = styled(Avatar)`\n  margin: 10px;\n  background-color: red;\n`;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport useReactRouter from \"use-react-router\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport AuthLayout from \"layouts/AuthLayout\";\nimport AuthService from \"services/AuthService\";\nimport routes from \"routes\";\n\nconst Auth: React.FC = () => {\n  const { history } = useReactRouter();\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const elements: any = event.currentTarget.elements;\n\n    AuthService.signin(elements[\"email\"].value, elements[\"password\"].value);\n    history.push(routes.root.path);\n  };\n\n  return (\n    <AuthLayout>\n      <Typography component=\"h1\" variant=\"h5\">\n        Sign in\n      </Typography>\n      <Form onSubmit={handleSubmit}>\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          required\n          fullWidth\n          type=\"email\"\n          id=\"email\"\n          label=\"Email Address\"\n          name=\"email\"\n          autoComplete=\"email\"\n          autoFocus\n        />\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          required\n          fullWidth\n          name=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          id=\"password\"\n          autoComplete=\"current-password\"\n        />\n        <SubmitButton\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          fullWidth\n        >\n          Sign In\n        </SubmitButton>\n      </Form>\n    </AuthLayout>\n  );\n};\n\nexport default Auth;\n\nconst Form = styled.form`\n  width: 100%;\n  margin-top: 10px;\n`;\n\nconst SubmitButton = styled(Button)`\n  margin: 10px 0;\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport MuiThemeProvider from \"@material-ui/core/styles/MuiThemeProvider\";\nimport { StylesProvider } from \"@material-ui/styles\";\n\nimport routes from \"routes\";\nimport \"./index.css\";\nimport theme from \"./theme/theme\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport PrivateRoute from \"components/PrivateRoute\";\n\nimport App from \"./App\";\nimport Auth from \"./Auth\";\n\nReactDOM.render(\n  <StylesProvider injectFirst>\n    <MuiThemeProvider theme={theme}>\n      <Router>\n        <Route path={routes.auth.signin.path} component={Auth} />\n        <PrivateRoute\n          path={routes.root.path}\n          redirectTo={routes.auth.signin.path}\n          component={App}\n        />\n      </Router>\n    </MuiThemeProvider>\n  </StylesProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}